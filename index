/*
LIME - Prototype React App
Single-file React component (App.jsx) for Vite-based project.

Usage:
1) Create project: npm create vite@latest lime-proto -- --template react
2) Replace src/App.jsx with the content of this file
3) Replace src/main.jsx if necessary to import './index.css'
4) Add the CSS below into src/index.css or paste into a <style> tag in public/index.html
5) npm install && npm run dev

This is a lightweight prototype implementing:
- Landing (sign in / sign up)
- Sign in / Sign up (localStorage mock)
- Home: sidebar + grid of projects, create new
- Workplace: editor with simple canvas drawing tools (pencil, eraser, color, brush size)
- Sharing mock page

This is intentionally small and dependency-free. Comments explain important parts.
*/

import React, { useEffect, useRef, useState } from 'react'

// Simple CSS (put these in src/index.css if using Vite)
// --- COPY THIS to src/index.css ---
/*
:root{ --accent:#f7e86b; --accent-2:#fbeec2; --bg:#fff; --muted:#666 }
*{box-sizing:border-box}
body{font-family:Inter, Arial, Helvetica, sans-serif;background:#f6f6f8;margin:0;color:#222}
.app{min-height:100vh;display:flex;flex-direction:column}
.header{background:linear-gradient(90deg,var(--accent-2),#fff);padding:18px 24px;border-bottom:1px solid #eee}
.header .brand{font-weight:800;font-size:28px;color:#333;letter-spacing:1px}
.container{display:flex;gap:18px;padding:20px}
.card{background:#fff;border-radius:8px;box-shadow:0 6px 18px rgba(20,20,30,0.04);padding:18px}
.landing-hero{display:flex;flex-direction:column;align-items:center;gap:12px;padding:40px 20px;text-align:center}
.btn{background:#222;color:#fff;padding:8px 14px;border-radius:6px;border:none;cursor:pointer}
.btn.alt{background:transparent;color:#222;border:1px solid #ddd}
.auth{max-width:360px;margin:18px auto}
.input{width:100%;padding:10px;border:1px solid #ddd;border-radius:6px;margin-bottom:10px}
.main-layout{display:flex;gap:12px}
.sidebar{width:220px}
.sidebar .item{padding:8px 10px;border-radius:6px;margin-bottom:8px;display:flex;align-items:center;gap:8px}
.sidebar .item:hover{background:#fbfbfc}
.grid{flex:1;display:grid;grid-template-columns:repeat(auto-fill,minmax(160px,1fr));gap:12px}
.project-card{border:1px dashed #e5e5e5;padding:10px;border-radius:8px;min-height:110px;display:flex;flex-direction:column;justify-content:space-between}
.toolbar{display:flex;gap:8px;align-items:center;margin-bottom:8px}
.canvas-box{background:#fff;border-radius:6px;padding:12px;border:1px solid #eee}
.small{font-size:12px;color:var(--muted)}
.footer{padding:12px;text-align:center;color:#777}

@media(max-width:800px){.container{padding:12px}.sidebar{display:none}}
*/

// Helper: simple in-memory routing
function Route({ route, current, children }){
  return current === route ? children : null
}

// Mock authentication using localStorage
function useAuth(){
  const [user, setUser] = useState(()=>{
    try{ return JSON.parse(localStorage.getItem('lime_user')) }catch(e){return null}
  })
  useEffect(()=>{ localStorage.setItem('lime_user', JSON.stringify(user)) },[user])
  return { user, setUser }
}

// Project storage
function useProjects(){
  const [projects, setProjects] = useState(()=>{
    try{ return JSON.parse(localStorage.getItem('lime_projects')) || [] }catch(e){return []}
  })
  useEffect(()=>{ localStorage.setItem('lime_projects', JSON.stringify(projects)) },[projects])
  const create = (title) => {
    const p = { id: Date.now().toString(), title: title||'New project', thumbnail: null }
    setProjects(prev => [p, ...prev])
    return p
  }
  const remove = (id) => setProjects(prev=>prev.filter(p=>p.id!==id))
  return { projects, create, remove, setProjects }
}

// Canvas drawing component (workplace)
function DrawingCanvas({ initialData, onExport }){
  const canvasRef = useRef(null)
  const [tool, setTool] = useState('pencil')
  const [color, setColor] = useState('#f7e86b')
  const [size, setSize] = useState(4)
  const [isDrawing, setIsDrawing] = useState(false)

  useEffect(()=>{
    const canvas = canvasRef.current
    if(!canvas) return
    const ctx = canvas.getContext('2d')
    // high DPI
    const ratio = window.devicePixelRatio || 1
    canvas.width = canvas.clientWidth * ratio
    canvas.height = canvas.clientHeight * ratio
    ctx.scale(ratio, ratio)
    ctx.lineJoin = 'round'
    ctx.lineCap = 'round'
    ctx.fillStyle = '#fff'
    ctx.fillRect(0,0,canvas.clientWidth, canvas.clientHeight)
    // load initial image if provided
    if(initialData){
      const img = new Image()
      img.onload = ()=> ctx.drawImage(img,0,0,canvas.clientWidth, canvas.clientHeight)
      img.src = initialData
    }
  }, [initialData])

  function getCtx(){
    const canvas = canvasRef.current
    if(!canvas) return null
    return canvas.getContext('2d')
  }

  function handlePointerDown(e){
    const ctx = getCtx(); if(!ctx) return
    setIsDrawing(true)
    const rect = e.target.getBoundingClientRect()
    ctx.beginPath()
    ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top)
  }
  function handlePointerMove(e){
    if(!isDrawing) return
    const ctx = getCtx(); if(!ctx) return
    const rect = e.target.getBoundingClientRect()
    if(tool === 'eraser'){
      ctx.globalCompositeOperation = 'destination-out'
      ctx.lineWidth = size*3
    } else {
      ctx.globalCompositeOperation = 'source-over'
      ctx.strokeStyle = color
      ctx.lineWidth = size
    }
    ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top)
    ctx.stroke()
  }
  function handlePointerUp(){ setIsDrawing(false) }

  function clear(){
    const canvas = canvasRef.current; const ctx = getCtx(); if(!ctx||!canvas) return
    ctx.clearRect(0,0,canvas.width,canvas.height)
    // fill white
    ctx.fillStyle='#fff'
    ctx.fillRect(0,0,canvas.clientWidth, canvas.clientHeight)
  }

  function exportImage(){
    const canvas = canvasRef.current
    if(!canvas) return
    const url = canvas.toDataURL('image/png')
    onExport && onExport(url)
    // download
    const a = document.createElement('a')
    a.href = url
    a.download = 'drawing.png'
    a.click()
  }

  return (
    <div>
      <div className="toolbar">
        <div style={{display:'flex',gap:8,alignItems:'center'}}>
          <button className="btn" onClick={()=>setTool('pencil')}>Pencil</button>
          <button className="btn alt" onClick={()=>setTool('eraser')}>Eraser</button>
        </div>
        <div style={{display:'flex',gap:8,alignItems:'center'}}>
          <label className="small">Size</label>
          <input type="range" min={1} max={30} value={size} onChange={e=>setSize(Number(e.target.value))} />
          <label className="small">Color</label>
          <input type="color" value={color} onChange={e=>setColor(e.target.value)} />
        </div>
        <div style={{marginLeft:'auto',display:'flex',gap:8}}>
          <button className="btn alt" onClick={clear}>Clear</button>
          <button className="btn" onClick={exportImage}>Save / Download</button>
        </div>
      </div>
      <div className="canvas-box" style={{marginTop:8}}>
        <div style={{width:'100%',height:420}}>
          <canvas ref={canvasRef} style={{width:'100%',height:'100%',touchAction:'none'}}
            onPointerDown={handlePointerDown}
            onPointerMove={handlePointerMove}
            onPointerUp={handlePointerUp}
            onPointerLeave={handlePointerUp}
          />
        </div>
      </div>
    </div>
  )
}

export default function App(){
  const { user, setUser } = useAuth()
  const { projects, create, remove } = useProjects()
  const [route, setRoute] = useState('landing')
  const [currentProject, setCurrentProject] = useState(null)

  useEffect(()=>{
    if(user){ setRoute('home') }
    else setRoute('landing')
  },[user])

  // simple handlers
  function handleSignIn(obj){ setUser(obj) }
  function handleSignOut(){ setUser(null); setRoute('landing') }

  function openProject(p){ setCurrentProject(p); setRoute('workplace') }

  return (
    <div className="app">
      <header className="header">
        <div style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>
          <div className="brand">LIME</div>
          <div style={{display:'flex',gap:8,alignItems:'center'}}>
            {user ? <><div className="small">{user.id}</div><button className="btn alt" onClick={handleSignOut}>Sign out</button></> : <button className="btn" onClick={()=>setRoute('signin')}>Sign in</button>}
          </div>
        </div>
      </header>

      <main style={{padding:20}}>
        <Route route="landing" current={route}>
          <div className="card landing-hero">
            <h1 style={{fontSize:38,margin:0}}>LIME</h1>
            <p className="small" style={{maxWidth:680}}>the most powerful and convenient tool for making your own web — prototype demo. Try drawing, sharing, and managing simple projects.</p>
            <div style={{display:'flex',gap:10}}>
              <button className="btn" onClick={()=>setRoute('signin')}>Sign in</button>
              <button className="btn alt" onClick={()=>setRoute('signup')}>Sign up</button>
            </div>
          </div>
        </Route>

        <Route route="signin" current={route}>
          <div className="card auth">
            <h2>Sign in</h2>
            <SignIn onSignIn={handleSignIn} goSignUp={()=>setRoute('signup')} />
          </div>
        </Route>

        <Route route="signup" current={route}>
          <div className="card auth">
            <h2>Sign up</h2>
            <SignUp onSignUp={handleSignIn} goSignIn={()=>setRoute('signin')} />
          </div>
        </Route>

        <Route route="home" current={route}>
          <div className="main-layout">
            <aside className="sidebar card">
              <div style={{display:'flex',alignItems:'center',gap:10,marginBottom:8}}>
                <div style={{width:44,height:44,borderRadius:22,background:'var(--accent)',display:'flex',alignItems:'center',justifyContent:'center'}}>🙂</div>
                <div>
                  <div style={{fontWeight:700}}>{user?.id}</div>
                  <div className="small">welcome</div>
                </div>
              </div>
              <div style={{marginTop:8}}>
                <div className="item">📁 Projects</div>
                <div className="item">🔗 Sharing</div>
                <div className="item">✏️ Drawing</div>
                <div className="item">➕ New</div>
              </div>
              <div style={{marginTop:12}}>
                <div className="small">Colors</div>
                <div style={{display:'flex',gap:6,marginTop:6}}>
                  <div style={{width:22,height:22,background:'var(--accent)',borderRadius:4}} />
                  <div style={{width:22,height:22,background:'#ffd7a8',borderRadius:4}} />
                  <div style={{width:22,height:22,background:'#d4ffd6',borderRadius:4}} />
                </div>
              </div>
            </aside>

            <section style={{flex:1}}>
              <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:12}}>
                <h3>My Projects</h3>
                <div>
                  <button className="btn" onClick={()=>{
                    const p = create('Untitled')
                    openProject(p)
                  }}>Make new!</button>
                </div>
              </div>

              <div className="grid">
                <div className="project-card card" style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center'}} onClick={()=>{ const p=create('Blank'); openProject(p) }}>
                  <div style={{fontSize:28}}>+</div>
                  <div className="small">Create new</div>
                </div>
                {projects.map(p=> (
                  <div key={p.id} className="project-card">
                    <div style={{fontWeight:700}}>{p.title}</div>
                    <div style={{display:'flex',gap:8,justifyContent:'space-between',alignItems:'center'}}>
                      <div className="small">{new Date(Number(p.id)).toLocaleString()}</div>
                      <div style={{display:'flex',gap:6}}>
                        <button className="btn alt" onClick={()=>openProject(p)}>Edit</button>
                        <button className="btn alt" onClick={()=>remove(p.id)}>Remove</button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </section>
          </div>
        </Route>

        <Route route="workplace" current={route}>
          <div style={{display:'flex',gap:12}}>
            <div style={{flex:1}}>
              <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginBottom:10}}>
                <div style={{display:'flex',gap:8,alignItems:'center'}}>
                  <button className="btn alt" onClick={()=>setRoute('home')}>Home</button>
                  <div className="small">/ {currentProject?.title}</div>
                </div>
                <div style={{display:'flex',gap:8}}>
                  <button className="btn alt" onClick={()=>setRoute('sharing')}>Share</button>
                </div>
              </div>
              <div className="card">
                <h3>Workspace — {currentProject?.title}</h3>
                <DrawingCanvas onExport={(url)=>{
                  // save thumbnail to project (quick mock)
                  const stored = JSON.parse(localStorage.getItem('lime_projects')||'[]')
                  const updated = stored.map(p=> p.id===currentProject.id ? {...p, thumbnail:url} : p)
                  localStorage.setItem('lime_projects', JSON.stringify(updated))
                  alert('Saved thumbnail to project!')
                }} />
              </div>
            </div>
            <aside style={{width:220}}>
              <div className="card">
                <h4>Tools</h4>
                <ul style={{paddingLeft:18}}>
                  <li>Polygons / shapes (future)</li>
                  <li>Insert / templates</li>
                  <li>Basic icons</li>
                </ul>
              </div>
              <div className="card" style={{marginTop:12}}>
                <h4>Slides</h4>
                <div style={{display:'flex',gap:8,overflowX:'auto'}}>
                  {[1,2,3,4,5].map(i=> <div key={i} style={{minWidth:80,height:50,border:'1px solid #eee',borderRadius:6,display:'flex',alignItems:'center',justifyContent:'center'}}>Slide {i}</div>)}
                </div>
              </div>
            </aside>
          </div>
        </Route>

        <Route route="sharing" current={route}>
          <div className="card">
            <h3>Sharing — Top projects</h3>
            <div style={{display:'grid',gridTemplateColumns:'repeat(3,1fr)',gap:12}}>
              {projects.slice(0,9).map(p=> (
                <div key={p.id} className="project-card card">
                  <div style={{height:80,background:'#fafafa',borderRadius:6,display:'flex',alignItems:'center',justifyContent:'center'}}>
                    {p.thumbnail ? <img src={p.thumbnail} alt="thumb" style={{maxWidth:'100%',maxHeight:'100%'}}/> : <div className="small">No thumbnail</div>}
                  </div>
                  <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',marginTop:8}}>
                    <div>{p.title}</div>
                    <button className="btn alt" onClick={()=>{ navigator.clipboard?.writeText(window.location.href); alert('Copied page URL (mock)') }}>Share</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </Route>

      </main>

      <div className="footer">LIME prototype — demo only</div>
    </div>
  )
}

// --- Helper components below ---
function SignIn({ onSignIn, goSignUp }){
  const [id, setId] = useState('')
  const [pw, setPw] = useState('')
  function submit(e){ e?.preventDefault(); if(!id){alert('enter id');return} onSignIn({id}); }
  return (
    <form onSubmit={submit}>
      <input className="input" placeholder="ID" value={id} onChange={e=>setId(e.target.value)} />
      <input className="input" placeholder="Password" type="password" value={pw} onChange={e=>setPw(e.target.value)} />
      <div style={{display:'flex',gap:8}}>
        <button className="btn" type="submit">Sign in</button>
        <button type="button" className="btn alt" onClick={goSignUp}>Sign up</button>
      </div>
      <div style={{marginTop:8}} className="small">Forgot password? (not implemented)</div>
    </form>
  )
}

function SignUp({ onSignUp, goSignIn }){
  const [id, setId] = useState('')
  const [pw, setPw] = useState('')
  const [pw2, setPw2] = useState('')
  function submit(e){ e?.preventDefault(); if(!id) return alert('enter id'); if(pw!==pw2) return alert('passwords not match'); onSignUp({id}); }
  return (
    <form onSubmit={submit}>
      <input className="input" placeholder="Choose ID" value={id} onChange={e=>setId(e.target.value)} />
      <input className="input" placeholder="Password" type="password" value={pw} onChange={e=>setPw(e.target.value)} />
      <input className="input" placeholder="Confirm password" type="password" value={pw2} onChange={e=>setPw2(e.target.value)} />
      <div style={{display:'flex',gap:8}}>
        <button className="btn" type="submit">Create account</button>
        <button type="button" className="btn alt" onClick={goSignIn}>Back</button>
      </div>
    </form>
  )
}
